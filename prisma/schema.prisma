datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String     @id @default(uuid())
  email             String     @unique
  password          String
  name              String?
  latitude          Float?
  longitude         Float?
  role              Role       @default(USER)
  services          Service[]
  schedules         Schedule[]
  feedbacks         Feedback[]
  receivedFeedbacks Feedback[] @relation("ReceivedFeedbacks")
  messages          Message[]  @relation("UserMessages")
  chats             Chat[]     @relation("UserChats")
}

model Professional {
  id                String     @id @default(uuid())
  email             String     @unique
  password          String
  name              String?
  profession        String
  latitude          Float?
  longitude         Float?
  role              Role       @default(PROFESSIONAL)
  services          Service[]
  schedules         Schedule[]
  feedbacks         Feedback[]
  receivedFeedbacks Feedback[] @relation("ProfessionalReceivedFeedbacks")
  messages          Message[]  @relation("ProfessionalMessages")
  chats             Chat[]     @relation("ProfessionalChats")
}

model Service {
  id             String        @id @default(uuid())
  title          String
  description    String
  price          Float
  latitude       Float?
  longitude      Float?
  userId         String
  professionalId String?
  user           User          @relation(fields: [userId], references: [id])
  professional   Professional? @relation(fields: [professionalId], references: [id])
  schedules      Schedule[]
  feedbacks      Feedback[]
  date           String
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  expiresAt      DateTime?
  chats          Chat[]
}

model Schedule {
  id             String        @id @default(uuid())
  title          String
  description    String
  date           String
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  professionalId String?
  professional   Professional? @relation(fields: [professionalId], references: [id])
  serviceId      String
  service        Service       @relation(fields: [serviceId], references: [id])
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
}

model Feedback {
  id                   String        @id @default(uuid())
  rating               Int
  comment              String
  createdAt            DateTime      @default(now())
  userId               String?
  user                 User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  professionalId       String?
  professional         Professional? @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  serviceId            String?
  service              Service?      @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  targetUserId         String?
  targetUser           User?         @relation("ReceivedFeedbacks", fields: [targetUserId], references: [id], onDelete: Cascade)
  targetProfessionalId String?
  targetProfessional   Professional? @relation("ProfessionalReceivedFeedbacks", fields: [targetProfessionalId], references: [id], onDelete: Cascade)
}

model Chat {
  id             String        @id @default(uuid())
  serviceId      String        @unique
  service        Service       @relation(fields: [serviceId], references: [id])
  userId         String
  user           User          @relation("UserChats", fields: [userId], references: [id])
  professionalId String
  professional   Professional  @relation("ProfessionalChats", fields: [professionalId], references: [id])
  messages       Message[]
}

model Message {
  id                  String        @id @default(uuid())
  chatId              String
  senderUserId        String?
  senderProfessionalId String?
  senderRole          Role
  message             String
  createdAt           DateTime      @default(now())
  chat                Chat          @relation(fields: [chatId], references: [id], onDelete: Cascade)
  senderUser          User?         @relation("UserMessages", fields: [senderUserId], references: [id], onDelete: Cascade)
  senderProfessional  Professional? @relation("ProfessionalMessages", fields: [senderProfessionalId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  PROFESSIONAL
}