datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  password      String?
  name          String?
  latitude      Float?
  longitude     Float?
  services      Service[]
  schedules     Schedule[]
  feedbacks     Feedback[] // Feedbacks given by the user
  receivedFeedbacks Feedback[] @relation("ReceivedFeedbacks")
  role          Role       @default(USER)
}

model Professional {
  id              String       @id @default(uuid())
  name            String
  email           String       @unique
  password        String
  profession      String
  latitude        Float?
  longitude       Float?
  schedules       Schedule[]
  services        Service[]
  feedbacks       Feedback[]
  receivedFeedbacks Feedback[] @relation("ProfessionalReceivedFeedbacks")
  role            Role         @default(PROFESSIONAL)
}

model Service {
  id             String        @id @default(uuid())
  title          String
  description    String
  price          Float
  latitude       Float?
  longitude      Float?
  userId         String
  professionalId String?
  user           User          @relation(fields: [userId], references: [id])
  professional   Professional? @relation(fields: [professionalId], references: [id])
  schedules      Schedule[]
  feedbacks      Feedback[]
  date           String
}

model Schedule {
  id              String        @id @default(uuid())
  title           String
  description     String
  date            String
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  professionalId  String?
  professional    Professional? @relation(fields: [professionalId], references: [id])
  serviceId       String
  service         Service       @relation(fields: [serviceId], references: [id])
}

model Feedback {
  id              String        @id @default(uuid())
  rating          Int
  comment         String
  createdAt       DateTime      @default(now())
  userId          String?
  user            User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  professionalId  String?
  professional    Professional? @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  serviceId       String?
  service         Service?      @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  targetUserId    String?
  targetUser      User?         @relation("ReceivedFeedbacks", fields: [targetUserId], references: [id], onDelete: Cascade)
  targetProfessionalId String?
  targetProfessional Professional? @relation("ProfessionalReceivedFeedbacks", fields: [targetProfessionalId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  PROFESSIONAL
}